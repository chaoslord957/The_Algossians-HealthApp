import React, { useState, useEffect } from 'react';
import { Ambulance, MapPin, Phone, Clock, Navigation, Star, Heart, AlertCircle } from 'lucide-react';

// ============================================
// LANGUAGE INTEGRATION POINT #1
// ============================================
// Replace this with your i18n library (react-i18next, etc.)
// Get currentLang from user session: localStorage.getItem('userLanguage') or from Redux/Context
const t = (key) => key; // This will return the key itself. Replace with actual translation function

const EmergencyServicesApp = () => {
  // ============================================
  // LANGUAGE INTEGRATION POINT #2
  // ============================================
  // Get user's selected language from login session
  // const currentLang = localStorage.getItem('userLanguage') || 'en';
  // OR from Context: const { language } = useAuth();
  
  const [activeTab, setActiveTab] = useState('book');
  const [bookingStep, setBookingStep] = useState(1);
  const [selectedAmbulance, setSelectedAmbulance] = useState(null);
  const [selectedProblem, setSelectedProblem] = useState(null);
  const [selectedHospital, setSelectedHospital] = useState(null);
  const [userLocation, setUserLocation] = useState(null);
  const [isTracking, setIsTracking] = useState(false);
  const [bookingData, setBookingData] = useState(null);

  // ============================================
  // GPS INTEGRATION POINT #1 - Get User Location
  // ============================================
  // This uses browser's geolocation API
  // For mobile apps, use: react-native-geolocation or expo-location
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setUserLocation({
            lat: position.coords.latitude,
            lng: position.coords.longitude,
            address: 'Current Location' 
            // Use Reverse Geocoding API here to get actual address:
            // Google Maps Geocoding API or MapMyIndia API for India
          });
        },
        (error) => console.error('Location error:', error)
      );
    }
  }, []);

  // ============================================
  // AMBULANCE TYPES DATA
  // ============================================
  // Move this to a separate config file or fetch from API
  const ambulanceTypes = [
    { id: 'basic', name: 'Basic Life Support', price: 500, available: true, icon: '🚑' },
    { id: 'advanced', name: 'Advanced Life Support', price: 1500, available: true, icon: '🚑' },
    { id: 'neonatal', name: 'Neonatal', price: 2000, available: true, icon: '👶' },
    { id: 'cardiac', name: 'Cardiac', price: 2500, available: false, icon: '❤️' },
    { id: 'air', name: 'Air Ambulance', price: 50000, available: false, icon: '🚁' }
  ];

  const problemTypes = [
    { id: 'cardiac', name: 'Heart Emergency', icon: '❤️' },
    { id: 'trauma', name: 'Accident/Trauma', icon: '🤕' },
    { id: 'stroke', name: 'Stroke', icon: '🧠' },
    { id: 'maternity', name: 'Maternity', icon: '🤰' },
    { id: 'general', name: 'General Emergency', icon: '🏥' }
  ];

  // ============================================
  // API INTEGRATION POINT #1 - Fetch Nearby Ambulances
  // ============================================
  // Replace with actual API call to your backend
  const fetchNearbyAmbulances = async (ambulanceType, location) => {
    // Example API call:
    // const response = await fetch(`/api/ambulances/nearby`, {
    //   method: 'POST',
    //   body: JSON.stringify({ type: ambulanceType.id, lat: location.lat, lng: location.lng })
    // });
    // return response.json();
    
    // Mock data for now
    return [
      { 
        id: 1, 
        driverName: 'Ravi Kumar', 
        phone: '+91-9876543210', 
        vehicleNo: 'AS-05-1234',
        location: { lat: userLocation?.lat + 0.01, lng: userLocation?.lng + 0.01 },
        eta: 5, 
        distance: 2.3 
      }
    ];
  };

  // ============================================
  // API INTEGRATION POINT #2 - Fetch Recommended Hospitals
  // ============================================
  // This should filter hospitals by problem type and sort by rating/distance
  const fetchRecommendedHospitals = async (problemType, location) => {
    // Example API call:
    // const response = await fetch(`/api/hospitals/recommended`, {
    //   method: 'POST',
    //   body: JSON.stringify({ 
    //     problemType: problemType.id, 
    //     lat: location.lat, 
    //     lng: location.lng 
    //   })
    // });
    // return response.json();
    
    // Mock data sorted by rating and distance
    return [
      { 
        id: 1, 
        name: 'Jorhat Medical College', 
        rating: 4.5, 
        distance: 3.2, 
        eta: 15,
        beds: 45,
        reviews: 1250,
        specialization: problemType.id 
      },
      { 
        id: 2, 
        name: 'City Hospital', 
        rating: 4.2, 
        distance: 5.1, 
        eta: 20,
        beds: 12,
        reviews: 890,
        specialization: 'general' 
      }
    ];
  };

  // ============================================
  // API INTEGRATION POINT #3 - Create Booking
  // ============================================
  const confirmBooking = async () => {
    const ambulances = await fetchNearbyAmbulances(selectedAmbulance, userLocation);
    const nearestAmbulance = ambulances[0];
    
    const estimatedCost = selectedAmbulance.price + (selectedHospital.distance * 50);
    
    // API call to create booking:
    // const response = await fetch('/api/bookings/create', {
    //   method: 'POST',
    //   body: JSON.stringify({
    //     userId: currentUser.id,
    //     ambulanceType: selectedAmbulance.id,
    //     problemType: selectedProblem.id,
    //     hospitalId: selectedHospital.id,
    //     pickupLocation: userLocation,
    //     estimatedCost: estimatedCost
    //   })
    // });
    // const booking = await response.json();
    
    setBookingData({
      bookingId: 'AMB' + Date.now(),
      ambulance: nearestAmbulance,
      ambulanceType: selectedAmbulance,
      hospital: selectedHospital,
      problemType: selectedProblem,
      cost: estimatedCost,
      eta: nearestAmbulance.eta,
      status: 'confirmed'
    });
    
    setIsTracking(true);
    setActiveTab('track');
  };

  // ============================================
  // GPS INTEGRATION POINT #2 - Real-time Tracking
  // ============================================
  // For production, use WebSocket or Socket.io for real-time updates
  // Backend sends ambulance GPS coordinates every few seconds
  useEffect(() => {
    if (isTracking && bookingData) {
      // Example WebSocket connection:
      // const socket = io('your-server-url');
      // socket.emit('track-ambulance', { bookingId: bookingData.bookingId });
      // socket.on('ambulance-location', (data) => {
      //   setAmbulanceLocation(data.location);
      //   setEstimatedArrival(data.eta);
      // });
      // return () => socket.disconnect();
      
      // Mock tracking simulation
      const interval = setInterval(() => {
        console.log('Tracking ambulance...');
      }, 5000);
      return () => clearInterval(interval);
    }
  }, [isTracking, bookingData]);

  // ============================================
  // HANDLE UNAVAILABLE SERVICE
  // ============================================
  const handleUnavailableService = (ambulanceType) => {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-2xl p-6 max-w-md">
          <AlertCircle className="w-12 h-12 text-orange-500 mx-auto mb-4" />
          <h3 className="text-xl font-bold text-gray-800 mb-2 text-center">
            Service Not Available
          </h3>
          <p className="text-gray-600 mb-4 text-center">
            {ambulanceType.name} is not available in your area currently.
          </p>
          <div className="space-y-3">
            <div className="bg-blue-50 p-4 rounded-xl">
              <h4 className="font-semibold text-gray-800 mb-2">Alternative Options:</h4>
              <ul className="text-sm text-gray-600 space-y-1">
                <li>• Call National Ambulance Service: <a href="tel:102" className="text-blue-600 font-semibold">102</a></li>
                <li>• Try Basic Life Support ambulance instead</li>
                <li>• Contact nearest hospital directly</li>
                <li>• Request community emergency help</li>
              </ul>
            </div>
            <button 
              onClick={() => window.location.reload()}
              className="w-full bg-red-500 text-white py-3 rounded-xl font-medium"
            >
              Choose Another Service
            </button>
          </div>
        </div>
      </div>
    );
  };

  // ============================================
  // MAIN RENDER
  // ============================================
  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-50 p-4">
      <div className="max-w-4xl mx-auto">
        
        {/* Header */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-red-500 rounded-full flex items-center justify-center">
              <Ambulance className="w-7 h-7 text-white" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-800">Emergency Services</h1>
              <p className="text-sm text-gray-500">ALGOSSIAN Health</p>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="bg-white rounded-2xl shadow-lg mb-6 p-2 flex gap-2">
          <button
            onClick={() => setActiveTab('book')}
            className={`flex-1 py-3 rounded-xl font-medium ${
              activeTab === 'book' ? 'bg-red-500 text-white' : 'text-gray-600'
            }`}
          >
            Book Ambulance
          </button>
          <button
            onClick={() => setActiveTab('track')}
            className={`flex-1 py-3 rounded-xl font-medium ${
              activeTab === 'track' ? 'bg-red-500 text-white' : 'text-gray-600'
            }`}
            disabled={!isTracking}
          >
            Track
          </button>
          <button
            onClick={() => setActiveTab('contacts')}
            className={`flex-1 py-3 rounded-xl font-medium ${
              activeTab === 'contacts' ? 'bg-red-500 text-white' : 'text-gray-600'
            }`}
          >
            Emergency Contacts
          </button>
        </div>

        {/* BOOK TAB */}
        {activeTab === 'book' && (
          <div className="space-y-6">
            
            {/* Step 1: Select Ambulance Type */}
            {bookingStep === 1 && (
              <div className="bg-white rounded-2xl shadow-lg p-6">
                <h2 className="text-xl font-bold mb-4">Select Ambulance Type</h2>
                <div className="grid md:grid-cols-2 gap-4">
                  {ambulanceTypes.map((type) => (
                    <button
                      key={type.id}
                      onClick={() => {
                        if (!type.available) {
                          alert('This service is not available. Please call 102 or choose another option.');
                          return;
                        }
                        setSelectedAmbulance(type);
                        setBookingStep(2);
                      }}
                      className={`p-4 rounded-xl border-2 text-left ${
                        type.available 
                          ? 'border-gray-200 hover:border-red-500' 
                          : 'border-gray-200 opacity-50'
                      }`}
                    >
                      <span className="text-3xl block mb-2">{type.icon}</span>
                      <h3 className="font-semibold">{type.name}</h3>
                      <p className="text-lg font-bold text-red-500">₹{type.price}</p>
                      {!type.available && (
                        <span className="text-xs bg-gray-200 px-2 py-1 rounded mt-2 inline-block">
                          Not Available
                        </span>
                      )}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Step 2: Select Problem Type */}
            {bookingStep === 2 && (
              <div className="bg-white rounded-2xl shadow-lg p-6">
                <button onClick={() => setBookingStep(1)} className="text-red-500 mb-4">
                  ← Back
                </button>
                <h2 className="text-xl font-bold mb-4">Select Emergency Type</h2>
                <div className="grid md:grid-cols-2 gap-4">
                  {problemTypes.map((type) => (
                    <button
                      key={type.id}
                      onClick={async () => {
                        setSelectedProblem(type);
                        const hospitals = await fetchRecommendedHospitals(type, userLocation);
                        setBookingStep(3);
                      }}
                      className="p-4 rounded-xl border-2 border-gray-200 hover:border-red-500 text-left"
                    >
                      <span className="text-3xl block mb-2">{type.icon}</span>
                      <h3 className="font-semibold">{type.name}</h3>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Step 3: Select Hospital */}
            {bookingStep === 3 && (
              <div className="bg-white rounded-2xl shadow-lg p-6">
                <button onClick={() => setBookingStep(2)} className="text-red-500 mb-4">
                  ← Back
                </button>
                <h2 className="text-xl font-bold mb-4">Select Hospital</h2>
                <div className="space-y-4">
                  {/* This would be populated from fetchRecommendedHospitals */}
                  {[
                    { id: 1, name: 'Jorhat Medical College', rating: 4.5, distance: 3.2, eta: 15, beds: 45 },
                    { id: 2, name: 'City Hospital', rating: 4.2, distance: 5.1, eta: 20, beds: 12 }
                  ].map((hospital, index) => (
                    <button
                      key={hospital.id}
                      onClick={() => {
                        setSelectedHospital(hospital);
                        setBookingStep(4);
                      }}
                      className="w-full p-4 rounded-xl border-2 border-gray-200 hover:border-red-500 text-left"
                    >
                      {index === 0 && (
                        <span className="bg-green-100 text-green-700 text-xs px-2 py-1 rounded mb-2 inline-block">
                          Best Match
                        </span>
                      )}
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-semibold">{hospital.name}</h3>
                        <div className="flex items-center gap-1 text-yellow-500">
                          <Star className="w-4 h-4 fill-current" />
                          <span className="text-sm">{hospital.rating}</span>
                        </div>
                      </div>
                      <div className="flex gap-4 text-sm text-gray-600">
                        <span>📍 {hospital.distance} km</span>
                        <span>⏱️ {hospital.eta} min</span>
                        <span>🛏️ {hospital.beds} beds</span>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Step 4: Confirm Booking */}
            {bookingStep === 4 && (
              <div className="bg-white rounded-2xl shadow-lg p-6">
                <button onClick={() => setBookingStep(3)} className="text-red-500 mb-4">
                  ← Back
                </button>
                <h2 className="text-xl font-bold mb-4">Confirm Booking</h2>
                
                <div className="bg-gray-50 rounded-xl p-4 mb-4 space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Ambulance:</span>
                    <span className="font-medium">{selectedAmbulance?.name}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Emergency:</span>
                    <span className="font-medium">{selectedProblem?.name}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Hospital:</span>
                    <span className="font-medium">{selectedHospital?.name}</span>
                  </div>
                  <div className="flex justify-between border-t pt-2">
                    <span className="text-gray-600">Estimated Cost:</span>
                    <span className="font-bold text-lg text-red-500">
                      ₹{selectedAmbulance?.price + (selectedHospital?.distance * 50)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Estimated Arrival:</span>
                    <span className="font-bold text-lg text-red-500">5 min</span>
                  </div>
                </div>

                <button
                  onClick={confirmBooking}
                  className="w-full bg-red-500 hover:bg-red-600 text-white font-bold py-4 rounded-xl"
                >
                  Confirm Booking
                </button>
              </div>
            )}
          </div>
        )}

        {/* TRACK TAB */}
        {activeTab === 'track' && isTracking && bookingData && (
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center animate-pulse">
                  <Ambulance className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h2 className="text-xl font-bold">Ambulance On The Way</h2>
                  <p className="text-sm text-gray-500">ID: {bookingData.bookingId}</p>
                </div>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-600">ETA</p>
                <p className="text-2xl font-bold text-red-500">{bookingData.eta} min</p>
              </div>
            </div>

            {/* ============================================ */}
            {/* GPS MAP INTEGRATION POINT #3 */}
            {/* ============================================ */}
            {/* Replace this div with actual map component: */}
            {/* For Web: Google Maps React, Mapbox, or Leaflet */}
            {/* For Mobile: react-native-maps */}
            {/* 
            <MapView
              initialRegion={{
                latitude: userLocation.lat,
                longitude: userLocation.lng,
                latitudeDelta: 0.05,
                longitudeDelta: 0.05,
              }}
            >
              <Marker coordinate={userLocation} title="You" />
              <Marker coordinate={ambulanceLocation} title="Ambulance" />
              <Polyline coordinates={[userLocation, ambulanceLocation]} />
            </MapView>
            */}
            <div className="bg-gradient-to-br from-blue-100 to-green-100 rounded-xl h-64 flex items-center justify-center mb-4 relative">
              <Navigation className="w-16 h-16 text-blue-500 animate-pulse" />
              <div className="absolute top-4 left-4 bg-white px-3 py-2 rounded-lg shadow text-sm">
                📍 Your Location
              </div>
              <div className="absolute bottom-4 right-4 bg-white px-3 py-2 rounded-lg shadow text-sm">
                🚑 2.3 km away
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-4 mb-4">
              <div className="bg-gray-50 rounded-xl p-4">
                <h3 className="font-semibold mb-2">Driver</h3>
                <p className="text-sm text-gray-600">{bookingData.ambulance.driverName}</p>
                <p className="text-sm text-gray-600">{bookingData.ambulance.vehicleNo}</p>
              </div>
              <div className="bg-gray-50 rounded-xl p-4">
                <h3 className="font-semibold mb-2">Hospital</h3>
                <p className="text-sm text-gray-600">{bookingData.hospital.name}</p>
                <p className="text-sm text-gray-600">{bookingData.hospital.distance} km</p>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <a
                href={`tel:${bookingData.ambulance.phone}`}
                className="flex items-center justify-center gap-2 bg-green-500 text-white py-3 rounded-xl"
              >
                <Phone className="w-5 h-5" />
                Call Driver
              </a>
              <button className="flex items-center justify-center gap-2 bg-blue-500 text-white py-3 rounded-xl">
                <MapPin className="w-5 h-5" />
                Share Location
              </button>
            </div>
          </div>
        )}

        {/* EMERGENCY CONTACTS TAB */}
        {activeTab === 'contacts' && (
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <h2 className="text-xl font-bold mb-4">Emergency Contacts</h2>
            <div className="grid md:grid-cols-2 gap-4">
              {[
                { name: 'Ambulance', number: '102', icon: '🚑' },
                { name: 'Police', number: '100', icon: '👮' },
                { name: 'Fire Service', number: '101', icon: '🚒' },
                { name: 'Disaster Management', number: '108', icon: '⚠️' }
              ].map((contact) => (
                <a
                  key={contact.number}
                  href={`tel:${contact.number}`}
                  className="flex items-center justify-between p-4 rounded-xl border-2 border-gray-200 hover:border-red-500"
                >
                  <div className="flex items-center gap-3">
                    <span className="text-3xl">{contact.icon}</span>
                    <div>
                      <h3 className="font-semibold">{contact.name}</h3>
                      <p className="text-2xl font-bold text-red-500">{contact.number}</p>
                    </div>
                  </div>
                  <Phone className="w-6 h-6 text-gray-400" />
                </a>
              ))}
            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default EmergencyServicesApp;
